{
    "source": "BDSA",
    "name": "BDSA-2020-1007",
    "title": "Salt Vulnerable to Arbitrary File Read/Write via Improper Parameter Validation in Multiple Methods",
    "description": "Salt is vulnerable to path traversal and arbitrary file writes due to the improper sanitization of client-provided input parameters. A remote authenticated attacker could access arbitrary directories on a vulnerable server by sending maliciously crafted requests to Salt minions.\n\nThis vulnerability is listed as exploitable by the Cybersecurity & Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).",
    "technicalDescription": "The `salt-master` process is associated with a variety of methods, the source code of which is specified in a range of files. A number of these methods are implemented in a dangerous manner.\n\nThe `get_token()` method, which is defined within the script `localfs.py`, accepts a client-controlled input parameter called `opts`. The value of this parameter will correspond to the options specified by a client for a `get_token` request. The client can specify a file path as a request option, which will be used to dynamically generate a full token path. This is not validated prior to the token retrieval process.\n\nThe`file_roots.py` script defines the  `read()` method. This calls the `find()` method, which uses a client-controlled parameter called `path`. This is used to dynamically create a full file path, which is then stored in the `full` variable. The value of this variable is not validated before the file at that path is accessed. The `file_roots.py` script also contains the `write()` method. This also dynamically generates a file path using a client-controlled input parameter called `path`. This file path is stored in the `dest` variable. The function will then write the value of the client-controlled `data` parameter to this location.\n\nThe `update_config()` method, which is defined in `config.py`, has the parameters `yaml_contents` and `file_name`, both of which can be specified by the client. The `file_name` parameter is intended to be used to specify the file that is to be written relative to the configuration directory. The `yaml_contents` parameter is intended to store the YAML configuration parameters that are to be written, but its value can be arbitrary. \n\nThis functionality allows a remote authenticated attacker to both read and/or write to arbitrary files on the master instance by sending maliciously crafted requests to Salt minions that specify a relative file path and arbitrary file contents via the aforementioned client-controlled parameters.",
    "publishedDate": "2020-05-06T15:26:03.247Z",
    "updatedDate": "2022-05-06T11:26:14.955Z",
    "disclosureDate": "2020-04-29T00:00:00.000Z",
    "exploitPublishDate": "2020-05-04T00:00:00.000Z",
    "solution": "Fixed in [**3000.2**](https://github.com/saltstack/salt/releases/tag/v3000.2) by [this](https://github.com/saltstack/salt/commit/cce7abad9c22d9d50ccee2813acabff8deca35dd) commit.\n\nFixed in [**2019.2.4**](https://github.com/saltstack/salt/releases/tag/v2019.2.4) by [this](https://github.com/saltstack/salt/commit/7bd0ab195fbec4f34523dad11149f741c154e2b7) commit.\n\nThe latest stable releases can be found [here](https://github.com/saltstack/salt/releases).",
    "severity": "HIGH",
    "cvss2": {
        "baseScore": 9.0,
        "impactSubscore": 10.0,
        "exploitabilitySubscore": 8.0,
        "severity": "HIGH",
        "accessVector": "NETWORK",
        "accessComplexity": "LOW",
        "authentication": "SINGLE",
        "confidentialityImpact": "COMPLETE",
        "integrityImpact": "COMPLETE",
        "availabilityImpact": "COMPLETE",
        "temporalMetrics": {
            "exploitability": "FUNCTIONAL",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 7.5
        },
        "vector": "(AV:N/AC:L/Au:S/C:C/I:C/A:C/E:F/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 8.8,
        "impactSubscore": 5.9,
        "exploitabilitySubscore": 2.8,
        "severity": "HIGH",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "LOW",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "FUNCTIONAL",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 8.2
        },
        "vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "credit": "F-Secure",
    "workaround": "It has been advised by the vendor that if the patch cannot be applied, then you should implement \"network security controls that restrict access to the salt master (ports 4505 and 4506 being the defaults) to known minions, or at least block the wider Internet\".",
    "vendorFixDate": "2020-04-13T00:00:00.000Z",
    "bdsaTags": [],
    "overallScore": 8.2,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-1007",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-23"
            },
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-73"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2020-11652",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-1007/ranges"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/blob/v3000.2_docs/doc/topics/releases/3000.2.rst",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/commit/7bd0ab195fbec4f34523dad11149f741c154e2b7",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/commit/cce7abad9c22d9d50ccee2813acabff8deca35dd",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/releases",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/releases/tag/v2019.2.4",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/saltstack/salt/releases/tag/v3000.2",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://www.cisa.gov/known-exploited-vulnerabilities-catalog",
                "label": "EXPLOIT"
            },
            {
                "rel": "reference",
                "href": "https://www.tenable.com/blog/cve-2020-11651-cve-2020-11652-critical-salt-framework-vulnerabilities-exploited-in-the-wild",
                "label": "POC"
            },
            {
                "rel": "reference",
                "href": "https://www.tenable.com/blog/cve-2020-11651-cve-2020-11652-critical-salt-framework-vulnerabilities-exploited-in-the-wild",
                "label": "WORKAROUND"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-1007/default-remediation-status"
            }
        ]
    }
}