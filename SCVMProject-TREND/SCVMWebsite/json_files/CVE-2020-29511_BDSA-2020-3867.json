{
    "source": "BDSA",
    "name": "BDSA-2020-3867",
    "title": "Go XML Encoding Component Vulnerable to Inducing Conflicting Behaviour in Downstream Components via Incorrectly Preserving Semantics of Element Namespace Prefixes During Tokenization Round-Trips",
    "description": "Go's encoding/xml component is vulnerable to creating an inconsistent state in affected downstream applications through not preserving the semantics of certain elements when decoding and re-encoding. A remote attacker could leverage this to force incorrect or conflicting decisions in affected applications.",
    "technicalDescription": "The Go language XML encoder/decoder is vulnerable to creating inconsistencies in downstream components because crafted markup can mutate during round-trips through the `xml.Decoder` and `xml.Encoder` implementations. This can result in a change in the observed namespace as well as the local name of a specially crafted XML element.\n\nA specific example of this flaw is given by the Mattermost downstream application developers where they describe a high severity impact on a SAML implementation:\n\"..an affected SAML implementation can interpret a SAML Assertion as signed, but then proceed to read values from an unsigned part of the same document due to namespace mutations between signature verification and data access. This can lead to full authentication bypass and arbitrary privilege escalation within the scope of a SAML Service Provider.\"",
    "publishedDate": "2020-12-23T15:43:28.999Z",
    "updatedDate": "2022-03-21T14:52:05.339Z",
    "disclosureDate": "2020-12-04T00:00:00.000Z",
    "solution": "Fixed in **[1.17-beta1](https://github.com/golang/go/releases/tag/go1.17beta1)** by [this](https://github.com/golang/go/commit/4d014e7231) commit.",
    "severity": "HIGH",
    "cvss2": {
        "baseScore": 7.5,
        "impactSubscore": 6.4,
        "exploitabilitySubscore": 10.0,
        "severity": "MEDIUM",
        "accessVector": "NETWORK",
        "accessComplexity": "LOW",
        "authentication": "NONE",
        "confidentialityImpact": "PARTIAL",
        "integrityImpact": "PARTIAL",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 5.5
        },
        "vector": "(AV:N/AC:L/Au:N/C:P/I:P/A:P/E:U/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 9.8,
        "impactSubscore": 5.9,
        "exploitabilitySubscore": 3.9,
        "severity": "HIGH",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 8.5
        },
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "credit": "Juho Nurminen",
    "workaround": "The mattermost developers have created the module \"xml-roundtrip-validator\" (available [here](https://github.com/mattermost/xml-roundtrip-validator)) to workaround this issue. Using this module on untrusted user input to detect unstable constructs in an XML document, including unstable element namespace prefixes, can mitigate the vulnerability by allowing an early failure in the end application.",
    "vendorFixDate": "2021-03-15T00:00:00.000Z",
    "bdsaTags": [],
    "overallScore": 8.5,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3867",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-115"
            },
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-168"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2020-29511",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3867/ranges"
            },
            {
                "rel": "reference",
                "href": "https://github.com/golang/go/commit/4d014e7231",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/golang/go/commit/4d014e723165f28b34458edb4aa9136e0fb4c702",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/golang/go/issues/43168",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://github.com/golang/go/releases/tag/go1.17beta1",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/mattermost/xml-roundtrip-validator",
                "label": "WORKAROUND"
            },
            {
                "rel": "reference",
                "href": "https://github.com/mattermost/xml-roundtrip-validator/blob/master/advisories/unstable-elements.md",
                "label": "ADVISORY"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3867/default-remediation-status"
            }
        ]
    }
}