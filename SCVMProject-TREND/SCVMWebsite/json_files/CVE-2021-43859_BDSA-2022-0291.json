{
    "source": "BDSA",
    "name": "BDSA-2022-0291",
    "title": "XStream Vulnerable to Denial-of-Service (DoS) via Object Injection",
    "description": "XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.",
    "technicalDescription": "This issue occurs in various files relating to unmarshalling of processed streams. It was mitigated by setting time limits on the addition of elements to collection or maps. \n\n**Note**: Per the Vendor,\n\n> The attack uses the hash code implementation for collections and maps to force an exponential calculation time due to highly recursive structures with in the collection or map. Following types of the Java runtime are affected in Java versions available in December 2021:\n> \n> `java.util.HashMap`\n> `java.util.HashSet`\n> `java.util.Hashtable`\n> `java.util.LinkedHashMap`\n> `java.util.LinkedHashSet`\n> `java.util.Stack` (older Java revisions only)\n> `java.util.Vector` (older Java revisions only)\n> \n> Other third party collection implementations that use their element's hash code may also be affected.",
    "publishedDate": "2022-02-01T17:32:10.528Z",
    "updatedDate": "2022-02-10T12:09:39.774Z",
    "disclosureDate": "2022-01-29T00:00:00.000Z",
    "exploitPublishDate": "2022-01-29T00:00:00.000Z",
    "solution": "Fixed in [**1.4.19**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_19) by [this](https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).",
    "severity": "MEDIUM",
    "cvss2": {
        "baseScore": 5.0,
        "impactSubscore": 2.9,
        "exploitabilitySubscore": 10.0,
        "severity": "LOW",
        "accessVector": "NETWORK",
        "accessComplexity": "LOW",
        "authentication": "NONE",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 3.9
        },
        "vector": "(AV:N/AC:L/Au:N/C:N/I:N/A:P/E:POC/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 7.5,
        "impactSubscore": 3.6,
        "exploitabilitySubscore": 3.9,
        "severity": "MEDIUM",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 6.7
        },
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "credit": "r00t4dm at Cloud-Penetrating Arrow Lab",
    "workaround": "Per the Vendor [workaround](https://x-stream.github.io/CVE-2021-43859.html):\n\n> If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:\n> ```\n> XStream xstream = new XStream();\n> xstream.setMode(XStream.NO_REFERENCES);\n> ```\n> If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n> ```\n> XStream xstream = new XStream();\n> xstream.denyTypes(new Class[]{\n> \tjava.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n> });\n> ```\n> \n> Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time:\n> \n> ```\n> xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n> xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n> ```\n> However, this implies that your application does not care about the implementation of the map and all elements are comparable.",
    "vendorFixDate": "2022-01-29T00:00:00.000Z",
    "bdsaTags": [],
    "overallScore": 6.7,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2022-0291",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-400"
            },
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-502"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2021-43859",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2022-0291/ranges"
            },
            {
                "rel": "reference",
                "href": "https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_19",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/x-stream/xstream/security/advisories/GHSA-rmr5-cpv2-vgjf",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://github.com/x-stream/xstream/tags",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://x-stream.github.io/CVE-2021-43859.html",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://x-stream.github.io/CVE-2021-43859.html",
                "label": "POC"
            },
            {
                "rel": "reference",
                "href": "https://x-stream.github.io/CVE-2021-43859.html",
                "label": "WORKAROUND"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2022-0291/default-remediation-status"
            }
        ]
    }
}