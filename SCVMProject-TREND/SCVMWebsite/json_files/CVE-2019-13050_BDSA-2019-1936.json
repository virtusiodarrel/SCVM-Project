{
    "source": "BDSA",
    "name": "BDSA-2019-1936",
    "title": "GnuPG Vulnerable to Denial-of-Service via Certificate Spamming Attack",
    "description": "When GnuPG is configured with a SKS keyserver network, it is vulnerable to a certificate spamming attack. A remote attacker could leverage this to poison a certificate with a huge number of attestation statements, causing a denial-of-service (DoS) for anyone retrieving that certificate.",
    "technicalDescription": "The SKS keyserver network allows a certificate to be poisoned by a huge number (150,000) of attestations (statements from other people, represented by their own public certificates, that this certificate really belongs to the individual in question).  When GnuPG retrieves such a certificate it will consume large amounts of CPU for some time, resulting in a persistent denial-of-service (DoS).\n\nSuch poisoned certificates will forever be on the existing keyserver network, as the network is designed from the ground up to never allow information to be removed.  Any retrieval of a poisoned certificate will essentially break a GnuPG installation.",
    "publishedDate": "2019-07-01T13:22:33.261Z",
    "updatedDate": "2019-07-02T09:49:20.649Z",
    "disclosureDate": "2019-06-29T00:00:00.000Z",
    "solution": "",
    "severity": "MEDIUM",
    "cvss2": {
        "baseScore": 5.0,
        "impactSubscore": 2.9,
        "exploitabilitySubscore": 10.0,
        "severity": "MEDIUM",
        "accessVector": "NETWORK",
        "accessComplexity": "LOW",
        "authentication": "NONE",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "WORKAROUND",
            "reportConfidence": "CONFIRMED",
            "score": 4.0
        },
        "vector": "(AV:N/AC:L/Au:N/C:N/I:N/A:P/E:U/RL:W/RC:C)"
    },
    "cvss3": {
        "baseScore": 6.5,
        "impactSubscore": 3.6,
        "exploitabilitySubscore": 2.8,
        "severity": "MEDIUM",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "REQUIRED",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "WORKAROUND",
            "reportConfidence": "CONFIRMED",
            "score": 5.8
        },
        "vector": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H/E:U/RL:W/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "workaround": "The vendor supplies the following workaround and repair advice for affected installations.  This information was shared by Robert J. Hansen under the Creative Commons Attribution-NoDerivatives 4.0 International License.\n\n> High-risk users should stop using the keyserver network immediately.\n> 1. Open gpg.conf in a text editor. Ensure there is no line starting with keyserver. If there is, remove it.\n> 2. Open dirmngr.conf in a text editor. Add the line keyserver hkps://keys.openpgp.org to the end of it.\n> \n> keys.openpgp.org is a new experimental keyserver which is not part of the keyserver network and has some features which make it resistant to this sort of attack. It is not a drop-in replacement: it has some limitations (for instance, its search functionality is sharply constrained). However, once you make this change you will be able to run gpg --refresh-keys with confidence.\n> \n> Repairs\n> If you know which certificate is likely poisoned, try deleting it: this normally goes pretty quickly. If your OpenPGP installation becomes usable again, congratulations. Acquire a new unpoisoned copy of the certificate and import that.\n> \n> If you don't know which certificate is poisoned, your best bet is to get a list of all your certificate IDs, delete your keyrings completely, and rebuild from scratch using known-good copies of the public certificates.",
    "bdsaTags": [],
    "overallScore": 5.8,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-1936",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-400"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2019-13050",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-1936/ranges"
            },
            {
                "rel": "reference",
                "href": "https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f",
                "label": "WORKAROUND"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-1936/default-remediation-status"
            }
        ]
    }
}