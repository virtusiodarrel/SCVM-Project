{
    "source": "BDSA",
    "name": "BDSA-2021-3444",
    "title": "angular-expressions Vulnerable to Remote Code Execution (RCE) via 'expressions.compile()' Method",
    "description": "NPM package angular-expressions is vulnerable to remote code execution whenever untrusted input is passed to an unsafe method. A remote attacker that is able to control the input to the `expressions.compile()` method could potentially execute malicious JavaScript in the browser of a victim. If the application that is using angular-expressions executes the method server-side, then the attacker could execute arbitrary code on that server.",
    "technicalDescription": "`ASTCompiler.prototype`, as defined in the file `lib/parse.js`, insufficiently restricts access to the prototype chains of objects. As a result of this, if an attacker can control the value that is passed to the `expressions.compile()` method, then they can perform a prototype pollution attack. The impact of the attack will depend on how the object is used, but can include cross-site scripting (XSS) and remote code execution (RCE) (if the attacker's injected code is evaluated server-side).\n\nThe vulnerability was fixed by preventing access to the prototype chains of objects via the `hasOwnProperty()` method.",
    "publishedDate": "2021-11-15T15:25:17.506Z",
    "updatedDate": "2022-02-10T11:29:00.947Z",
    "disclosureDate": "2021-01-29T00:00:00.000Z",
    "solution": "Fixed in version [**1.1.2**](https://github.com/peerigon/angular-expressions/releases/tag/v1.1.2) by [this](https://github.com/peerigon/angular-expressions/commit/07edb62902b1f6127b3dcc013da61c6316dd0bf1) commit.\n\nThe latest stable releases can be found [here](https://www.npmjs.com/package/angular-expressions).",
    "severity": "HIGH",
    "cvss2": {
        "baseScore": 7.5,
        "impactSubscore": 6.4,
        "exploitabilitySubscore": 10.0,
        "severity": "MEDIUM",
        "accessVector": "NETWORK",
        "accessComplexity": "LOW",
        "authentication": "NONE",
        "confidentialityImpact": "PARTIAL",
        "integrityImpact": "PARTIAL",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 5.5
        },
        "vector": "(AV:N/AC:L/Au:N/C:P/I:P/A:P/E:U/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 9.8,
        "impactSubscore": 5.9,
        "exploitabilitySubscore": 3.9,
        "severity": "HIGH",
        "attackVector": "NETWORK",
        "attackComplexity": "LOW",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 8.5
        },
        "vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "credit": "Maxime Nadeau (GoSecure, Inc.)",
    "workaround": "The vendor has stated [here](https://github.com/peerigon/angular-expressions/security/advisories/GHSA-j6px-jwvv-vpwq) that the following workarounds can be implemented:\n\n> disable user-controlled input that will be fed into angular-expressions in your application\n> OR\n> allow only following characters in the userControlledInput :\n`if (/^[|a-zA-Z.0-9 :\"'+-?]+$/.test(userControlledInput)) {\n      var result = expressions.compile(userControlledInput);\n}\nelse {\n     result = undefined;\n}`",
    "vendorFixDate": "2021-01-29T00:00:00.000Z",
    "bdsaTags": [
        "RCE"
    ],
    "overallScore": 8.5,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2021-3444",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-915"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2021-21277",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2021-3444/ranges"
            },
            {
                "rel": "reference",
                "href": "http://blog.angularjs.org/2016/09/angular-16-expression-sandbox-removal.html",
                "label": "LINK"
            },
            {
                "rel": "reference",
                "href": "https://github.com/peerigon/angular-expressions/commit/07edb62902b1f6127b3dcc013da61c6316dd0bf1",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/peerigon/angular-expressions/releases/tag/v1.1.2",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/peerigon/angular-expressions/security/advisories/GHSA-j6px-jwvv-vpwq",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://github.com/peerigon/angular-expressions/security/advisories/GHSA-j6px-jwvv-vpwq",
                "label": "WORKAROUND"
            },
            {
                "rel": "reference",
                "href": "https://www.npmjs.com/package/angular-expressions",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2021-3444/default-remediation-status"
            }
        ]
    }
}