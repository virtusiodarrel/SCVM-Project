{
    "source": "BDSA",
    "name": "BDSA-2019-2248",
    "title": "libjpeg-turbo Vulnerable to Denial-of-Service (DoS) via Memory Leak in 'djpeg.c'",
    "description": "libjpeg-turbo is vulnerable to denial-of-service (DoS) due to the mismanagement of system memory resources. An attacker could cause a victim's instance of the application to become unresponsive by tricking them into running the application using crafted input.",
    "technicalDescription": "The script `djpeg.c` contains code that is used by libjpeg-turbo to decompress `.jpeg` images. During the decompression process, heap memory is allocated using the `malloc()` function. The amount of memory to be allocated is determined using the image's dimensions, the details of which are obtained from its metadata. The height of the image as specified in the metadata is stored in the variable `cinfo.output_height`, and the width is stored in the variable `cinfo.output_width`. The cropped image height is stored within the variable `crop_height`. The application will allocate memory after calling `jpeg_read_scanlines()`, which is called continuously within a `while` loop. The loop will continue to run until the value of the variable `cinfo.output_scanline` matches that of `crop_y + crop_height` or `cinfo.output_height`. If the metadata of the image is such that the values of these two variables are extremely large, the program will continue to allocate memory until its available memory resources have been exhausted. This behavior can result in the program becoming unresponsive, or could cause it to crash. An attacker could therefore cause a victim's instance of the application to become unresponsive by tricking them into running the application using crafted input.",
    "publishedDate": "2019-07-22T11:30:18.088Z",
    "updatedDate": "2019-07-22T11:30:18.076Z",
    "disclosureDate": "2019-02-27T00:00:00.000Z",
    "exploitPublishDate": "2019-02-27T00:00:00.000Z",
    "solution": "",
    "severity": "LOW",
    "cvss2": {
        "baseScore": 4.3,
        "impactSubscore": 2.9,
        "exploitabilitySubscore": 8.6,
        "severity": "LOW",
        "accessVector": "NETWORK",
        "accessComplexity": "MEDIUM",
        "authentication": "NONE",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "WORKAROUND",
            "reportConfidence": "CONFIRMED",
            "score": 3.7
        },
        "vector": "(AV:N/AC:M/Au:N/C:N/I:N/A:P/E:POC/RL:W/RC:C)"
    },
    "cvss3": {
        "baseScore": 3.3,
        "impactSubscore": 1.4,
        "exploitabilitySubscore": 1.8,
        "severity": "LOW",
        "attackVector": "LOCAL",
        "attackComplexity": "LOW",
        "confidentialityImpact": "NONE",
        "integrityImpact": "NONE",
        "availabilityImpact": "LOW",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "REQUIRED",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "WORKAROUND",
            "reportConfidence": "CONFIRMED",
            "score": 3.1
        },
        "vector": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L/E:P/RL:W/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "workaround": "The vendor suggests that the following workarounds are used for mission-critical applications:\n\n* Make libjpeg warnings fatal to catch the most severe corner cases.\n \n* Use cinfo.max_memory_to_use to ensure that libjpeg-turbo will never use more than the available physical memory (or some percentage thereof) when allocating full-image buffers for progressive JPEG decompression.\n\n* Calculate, based on available physical memory (or some percentage thereof), the maximum JPEG image size that can be decompressed, and if an image header is encountered that exceeds that maximum size, don't read beyond the header.",
    "bdsaTags": [],
    "overallScore": 3.1,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-2248",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-770"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2019-13960",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-2248/ranges"
            },
            {
                "rel": "reference",
                "href": "https://github.com/libjpeg-turbo/libjpeg-turbo/issues/337",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://github.com/libjpeg-turbo/libjpeg-turbo/issues/337",
                "label": "POC"
            },
            {
                "rel": "reference",
                "href": "https://github.com/libjpeg-turbo/libjpeg-turbo/issues/337",
                "label": "WORKAROUND"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-2248/default-remediation-status"
            }
        ]
    }
}