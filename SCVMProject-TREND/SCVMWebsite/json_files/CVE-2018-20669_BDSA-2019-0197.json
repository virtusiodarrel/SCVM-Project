{
    "source": "BDSA",
    "name": "BDSA-2019-0197",
    "title": "Linux Kernel Vulnerable to Privilege Escalation via Missing 'access_ok()' Checks in 'i915_gem_execbuffer2_ioctl()' Function",
    "description": "Linux kernel is vulnerable to privilege escalation as it does not enforce essential checks in an IOCTL function which may lead to unauthorized access to kernel space. An unsafe direct user access hardware feature is used under an erroneous assumption that these checks will be done elsewhere which may allow an attacker to perform arbitrary write to kernel space.",
    "technicalDescription": "This flaw lies in the `i915_gem_execbuffer2_ioctl()` function of the `/drivers/gpu/drm/i915/i915_gem_execbuffer.c` source file. A lack of  `access_ok()` checks before performing a direct user access may allow unauthorized access to kernel memory. \n\nWhen handling system calls, the kernel needs to perform r/w operations in the memory of the invoking process. This is done with `copy_from_user()`, `put_user()`, and similar which will copy data from and to userland. These functions contain the `access_ok()` check which is responsible for making sure that the passed pointer is in userland and not kernel memory. If the check passes, the kernel disables certain protections with `user_access_begin()`, performs a write, and re-enables them.\n\nThis checking process has some overhead which may be an inconvenience for certain system calls that perform many calls to `put/get_user()`. To get around this, special methods that skip the check have been implemented - e.g. `__put_user()` and `unsafe_put_user`. When using them the developers are advised to perform the `access_ok()` check separately, call `user_access_begin()` and eventually perform the direct (optimized) user access. The problem is that it is often assumed that the check will be implemented by other operation or similar when in fact it is not.\n\nThis flaw may allow a local attacker to escalate their privileges by passing a pointer to the kernel memory if the host makes use of the unsafe direct user accesses hardware features (SMAP - Supervisor Mode Access Protection - on x86, or PAN - Privileged Access Never - on ARM). Since the `access_ok()` checks are missing in `i915_gem_execbuffer2_ioctl()` SMAP/PAN will be disabled anyway and allow `unsafe_put_user()` writes to the kernel space.",
    "publishedDate": "2019-01-24T15:22:55.470Z",
    "updatedDate": "2020-07-06T14:58:59.794Z",
    "disclosureDate": "2019-01-23T00:00:00.000Z",
    "solution": "Fixed in:\n* [**4.14.185**](https://www.kernel.org) by [this](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=b25df2918ba94ccc0ae44b4bb53f0f76a4bb0e96) commit.\n* [**4.19.129**](https://www.kernel.org) by [this](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=216284c4a126b28469eb0bf4994c669e251f47ba) commit.\n* [**5.0-rc1**](https://www.kernel.org) by [this](https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=594cc251fdd0d231d342d88b2fdff4bc42fb0690) commit.",
    "severity": "MEDIUM",
    "cvss2": {
        "baseScore": 6.0,
        "impactSubscore": 10.0,
        "exploitabilitySubscore": 1.5,
        "severity": "MEDIUM",
        "accessVector": "LOCAL",
        "accessComplexity": "HIGH",
        "authentication": "SINGLE",
        "confidentialityImpact": "COMPLETE",
        "integrityImpact": "COMPLETE",
        "availabilityImpact": "COMPLETE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 4.5
        },
        "vector": "(AV:L/AC:H/Au:S/C:C/I:C/A:C/E:U/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 7.0,
        "impactSubscore": 5.9,
        "exploitabilitySubscore": 1.0,
        "severity": "MEDIUM",
        "attackVector": "LOCAL",
        "attackComplexity": "HIGH",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "LOW",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 6.1
        },
        "vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "workaround": "",
    "vendorFixDate": "2019-01-04T00:00:00.000Z",
    "bdsaTags": [],
    "overallScore": 6.1,
    "_meta": {
        "allow": [],
        "href": "https://trendmicro.app.blackduck.com/api/vulnerabilities/BDSA-2019-0197",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro.app.blackduck.com/api/cwes/CWE-269"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro.app.blackduck.com/api/vulnerabilities/CVE-2018-20669",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro.app.blackduck.com/api/vulnerabilities/BDSA-2019-0197/ranges"
            },
            {
                "rel": "reference",
                "href": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/?id=594cc251fdd0d231d342d88b2fdff4bc42fb0690",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://www.kernel.org/",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://www.openwall.com/lists/oss-security/2019/01/23/6",
                "label": "ADVISORY"
            }
        ]
    }
}