{
    "source": "BDSA",
    "name": "BDSA-2020-3204",
    "title": "Black Duck Vulnerable to Man-in-the-Middle (MiTM) Attacks via Insecure Default 'verify' Parameter Value",
    "description": "Black Duck is vulnerable to man-in-the-middle (MiTM) attacks due to the use of hardcoded function arguments which bypass the application's certificate validation configuration. An attacker could view and modify the contents of network traffic that is produced by scans that implement the problematic APIs.",
    "technicalDescription": "The Black Duck API wrapper communicates with the Black Duck server using the Python `requests` library. Numerous functions within this library, such as `requests.get()`,  implement a parameter called `verify` that is used to determine whether or not certificate validation should occur for the requests that are produced when the function is called. The value passed to this parameter can be obtained at runtime via the  `insecure` configuration option. This configuration option gives end users the ability to choose whether or not certificate validation should be enforced. Users can indicate that they wish for certificate validation to be enforced at all times by setting the value of this configuration option to `false`.\n\nA number of problematic methods exist within the API library. These methods are problematic because they pass a hardcoded value to the `verify` parameter, thus bypassing the certificate validation policy that the user has chosen. The `upload_scan()` method is used to upload scan results to the Black Duck server, and calls `requests.post()` in order to do so. A hardcoded value of `False` is passed to the `verify` parameter whenever `requests.post()` is called. This means that certificate validation will not occur for requests submitted by `upload_scan()`, regardless of the API configuration state that has been specified by the end user. Another example of a problematic method is `download_project_scans()`, which is used to download scan results from the Black Duck server. This method passes a hardcoded value of `False` to the `verify` parameter of the `requests.get()` method, and so once again bypasses the end user's certificate validation policy.\n\nThe problematic methods are incorporated into a number of projects, include `bd-offline-scanning-solution`. This project calls the aforementioned `upload_scan()` method within the file `upload_scans.py`. \n\nThis missing certificate validation allows attackers to commit MiTM attacks in order to view and modify data that is being communicated between the client and the Black Duck server. An attacker could view the client's bill-of-materials, and learn about vulnerabilities that exist within its constituent software components. The attacker could also patch the traffic so as to prevent the client from learning about, and therefore patching, vulnerabilities that exist within those components.\n\nThe issue was resolved by ensuring that hardcoded values are not passed to the `verify`parameter. The value passed to this parameter will instead be based on the end user's `insecure` configuration option.",
    "publishedDate": "2020-11-06T12:47:47.366Z",
    "updatedDate": "2020-11-06T13:37:05.530Z",
    "disclosureDate": "2020-11-05T00:00:00.000Z",
    "solution": "Fixed in [**0.0.53**](https://pypi.org/project/blackduck/0.0.53/) by [this](https://github.com/blackducksoftware/hub-rest-api-python/commit/273b27d0de1004389dd8cf43c40b1197c787e7cd) commit.\n\nThe latest stable releases are available [here](https://pypi.org/project/blackduck/).",
    "severity": "MEDIUM",
    "cvss2": {
        "baseScore": 4.0,
        "impactSubscore": 4.9,
        "exploitabilitySubscore": 4.9,
        "severity": "LOW",
        "accessVector": "NETWORK",
        "accessComplexity": "HIGH",
        "authentication": "NONE",
        "confidentialityImpact": "PARTIAL",
        "integrityImpact": "PARTIAL",
        "availabilityImpact": "NONE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 3.0
        },
        "vector": "(AV:N/AC:H/Au:N/C:P/I:P/A:N/E:U/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 7.4,
        "impactSubscore": 5.2,
        "exploitabilitySubscore": 2.2,
        "severity": "MEDIUM",
        "attackVector": "NETWORK",
        "attackComplexity": "HIGH",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "NONE",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "NONE",
        "temporalMetrics": {
            "exploitability": "UNPROVEN",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 6.4
        },
        "vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N/E:U/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "credit": "James Otten, Optiv",
    "workaround": "",
    "vendorFixDate": "2020-10-22T00:00:00.000Z",
    "vendorNotifiedDate": "2020-09-22T00:00:00.000Z",
    "bdsaTags": [],
    "overallScore": 6.4,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3204",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-295"
            },
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-300"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2020-27589",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3204/ranges"
            },
            {
                "rel": "reference",
                "href": "https://github.com/blackducksoftware/hub-rest-api-python/commit/273b27d0de1004389dd8cf43c40b1197c787e7cd",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://pypi.org/project/blackduck/",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://pypi.org/project/blackduck/0.0.53/",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://www.optiv.com/explore-optiv-insights/source-zero/certificate-validation-disabled-black-duck-api-wrapper",
                "label": "ADVISORY"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2020-3204/default-remediation-status"
            }
        ]
    }
}