{
    "source": "BDSA",
    "name": "BDSA-2019-3282",
    "title": "android-gif-drawable Vulnerable to Remote Code Execution (RCE) via Double-Free in 'DDGifSlurp()' Function",
    "description": "android-gif-drawable is vulnerable to remote code execution (RCE) and privilege escalation due to the mismanagement of system memory resources. An attacker could execute arbitrary instructions on a victim's system by tricking them into downloading a crafted GIF image and then viewing that GIF image within the WhatsApp gallery. The code will be executed in the context of the WhatsApp application.",
    "technicalDescription": "A GIF file specifies multiple image frames, each of which must be decoded. The script `decoding.c` contains functions that are used by android-gif-drawable in order to conduct the decoding process. One of the functions defined within this script is `DDGifSlurp()`. Information relating to the GIF file that is being decoded is stored within a structure which is pointed to by `gifFilePtr`. The variable `gifFilePtr->rasterBits` denotes a heap memory buffer that is used to store the decoded GIF frame data. \n\nEach frame within the GIF file will be decoded sequentially. If the frame currently being processed has the same dimensions as the previous frame then the `rasterBits` buffer will be re-used. If not, then the `rasterBits` buffer will be reallocated via the `reallocarray()` function. This function will call `free()` to deallocate the current `rasterBits` buffer, and will then call `malloc()` to obtain a new buffer. One of its arguments, `newRasterSize`, denotes the amount of memory that is to be allocated for the new buffer. The value of `newRasterSize` is obtained from the calculation `gifFilePtr->Image.Width * gifFilePtr->Image.Height`, with these values being specific to the frame being decoded. It is obvious that if both `gifFilePtr->Image.Width` and `gifFilePtr->Image.Height` are zero, then `newRasterSize` will also be zero. If `reallocarray()` is called with a value of zero, it performs a `free()` operation without performing a subsequent `malloc()` operation. If two sequential frames are being decoded in which `gifFilePtr->Image.Width` and `gifFilePtr->Image.Height` are both zero, then `reallocarray()` will perform a `free()` operation twice i.e. a double-free will occur.\n\nWhenever a GIF is previewed in certain applications, such as the WhatsApp gallery viewer, it is decoded twice. The `GifInfo` type structure `info` will first be created on the heap. If the first frame of the GIF has a size that is equivalent to `sizeof(GifInfo)`, and then the two subsequent frames have a size of zero, the aforementioned double free will occur, with two pointers to a buffer with size `sizeof(GifInfo)` being stored for later use by the heap allocator. Whenever the GIF is being parsed a second time, one of these pointers will be assigned to the `info` variable, and then the next one will be assigned to the `gifFilePtr->rasterBits` variable. Whenever the decoded frame data is being written to `gifFilePtr->rasterBits`, it will overwrite the `info` structure as well. This structure contains function pointers, which can be overwritten by an attacker using a carefully crafted GIF file in order to redirect execution to malicious code. This can allow them to execute arbitrary code on a victim's device in the context of the WhatApp process, and so both constitutes a privilege escalation vulnerability and a remote code execution vulnerability. If they cannot gain arbitrary code execution, they may still be able to crash the process by causing an exception to be raised.\n\nIt should be noted that an attacker will only be able to fully exploit this vulnerability under certain circumstances, such as when they have collected the addresses of zygote libraries on the target system.",
    "publishedDate": "2019-10-22T09:37:53.172Z",
    "updatedDate": "2019-10-22T09:37:53.155Z",
    "disclosureDate": "2019-10-02T00:00:00.000Z",
    "exploitPublishDate": "2019-10-02T00:00:00.000Z",
    "solution": "Fixed in version [**1.2.18**](https://github.com/koral--/android-gif-drawable/releases/tag/v1.2.18) by [this](https://github.com/koral--/android-gif-drawable/commit/cc5b4f8e43463995a84efd594f89a21f906c2d20) commit.\n\nThe latest stable releases can be found [here](https://github.com/koral--/android-gif-drawable/releases).",
    "severity": "MEDIUM",
    "cvss2": {
        "baseScore": 5.1,
        "impactSubscore": 6.4,
        "exploitabilitySubscore": 4.9,
        "severity": "MEDIUM",
        "accessVector": "NETWORK",
        "accessComplexity": "HIGH",
        "authentication": "NONE",
        "confidentialityImpact": "PARTIAL",
        "integrityImpact": "PARTIAL",
        "availabilityImpact": "PARTIAL",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 4.0
        },
        "vector": "(AV:N/AC:H/Au:N/C:P/I:P/A:P/E:POC/RL:OF/RC:C)"
    },
    "cvss3": {
        "baseScore": 7.0,
        "impactSubscore": 5.9,
        "exploitabilitySubscore": 1.0,
        "severity": "MEDIUM",
        "attackVector": "LOCAL",
        "attackComplexity": "HIGH",
        "confidentialityImpact": "HIGH",
        "integrityImpact": "HIGH",
        "availabilityImpact": "HIGH",
        "privilegesRequired": "NONE",
        "scope": "UNCHANGED",
        "userInteraction": "REQUIRED",
        "temporalMetrics": {
            "exploitability": "PROOF_OF_CONCEPT",
            "remediationLevel": "OFFICIAL_FIX",
            "reportConfidence": "CONFIRMED",
            "score": 6.3
        },
        "vector": "CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C"
    },
    "useCvss3": true,
    "classifications": [],
    "zeroDay": false,
    "underReview": false,
    "parentAdvisory": false,
    "workaround": "",
    "vendorFixDate": "2019-08-10T00:00:00.000Z",
    "bdsaTags": [
        "RCE"
    ],
    "overallScore": 6.3,
    "_meta": {
        "allow": [
            "GET"
        ],
        "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-3282",
        "links": [
            {
                "rel": "cwes",
                "href": "https://trendmicro2.app.blackduck.com/api/cwes/CWE-415"
            },
            {
                "rel": "related-vulnerability",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/CVE-2019-11932",
                "label": "NVD"
            },
            {
                "rel": "bdsa-ranges",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-3282/ranges"
            },
            {
                "rel": "reference",
                "href": "https://awakened1712.github.io/hacking/hacking-whatsapp-gif-rce/",
                "label": "ADVISORY"
            },
            {
                "rel": "reference",
                "href": "https://awakened1712.github.io/hacking/hacking-whatsapp-gif-rce/",
                "label": "POC"
            },
            {
                "rel": "reference",
                "href": "https://github.com/koral--/android-gif-drawable/commit/cc5b4f8e43463995a84efd594f89a21f906c2d20",
                "label": "PATCH"
            },
            {
                "rel": "reference",
                "href": "https://github.com/koral--/android-gif-drawable/releases",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "reference",
                "href": "https://github.com/koral--/android-gif-drawable/releases/tag/v1.2.18",
                "label": "VENDOR_UPGRADE"
            },
            {
                "rel": "default-remediation-status",
                "href": "https://trendmicro2.app.blackduck.com/api/vulnerabilities/BDSA-2019-3282/default-remediation-status"
            }
        ]
    }
}